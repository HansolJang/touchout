package kr.jroad.touchout.fragment;

import kr.jroad.touchout.activity.R;
import kr.jroad.touchout.activity.StoreMenuActivity;
import kr.jroad.touchout.adapter.MenuListAdapter;
import kr.jroad.touchout.adapter.MenuListAdapter.OnMenuAdapterClickListner;
import kr.jroad.touchout.data.FavoriteItem;
import kr.jroad.touchout.data.PostResult;
import kr.jroad.touchout.data.StoreMenuItem;
import kr.jroad.touchout.data.StoreMenuResult;
import kr.jroad.touchout.manager.NetworkManager;
import kr.jroad.touchout.manager.NetworkManager.OnResultListener;
import kr.jroad.touchout.view.MenuListView;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.Spinner;

public class StoreHotMenuFragment extends Fragment {

	Spinner hotMenuSpinner;
	ListView menuList;
	MenuListAdapter menuAdapter;
	int storeId;
	int stampCount;
	FavoriteItem editFavoriteMenu;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);

		Bundle b = getArguments();
		if (b != null) {
			editFavoriteMenu = b.getParcelable(FavoriteFragment.GO_EDIT_MENU);
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater,
			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_hot_menu, container, false);
	}

	@Override
	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		storeId = ((StoreMenuActivity) getActivity()).getStoreId();

		menuList = (ListView) view.findViewById(R.id.store_hot_menu_list);
		menuAdapter = new MenuListAdapter(getActivity());

		addToCart();

		menuAdapter
				.setOnFavoriteSelectListener(new OnMenuAdapterClickListner() {
					
					@Override
					public void onWhippingSelectListener(MenuListView view, StoreMenuItem data) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onPaymentListener(MenuListView view, StoreMenuItem data) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onFavoriteSelectListener(MenuListView view, StoreMenuItem data) {
						// !null -> edit
						if (editFavoriteMenu != null) {
							NetworkManager.getInstance().editFavoriteData(
									getActivity(),
									editFavoriteMenu.favorite_id, data.item_id,
									data.whippingSelected, data.size,
									new OnResultListener<PostResult>() {

										//완료하면 창닫고 즐찾 목록 다시 get
										@Override
										public void onSuccess(PostResult result) {
											if(result.success == 1) {
												getActivity().finish();
											}
										}

										@Override
										public void onFail(int code) {
											// TODO Auto-generated method stub

										}

									});
						}
						
					}
					
					@Override
					public void onCountPlusListener(MenuListView view, StoreMenuItem data) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onCountMinusListener(MenuListView view, StoreMenuItem data) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onAddCartListener(MenuListView view, StoreMenuItem data) {
						// TODO Auto-generated method stub
						
					}
				});
		
		menuList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				menuAdapter.clearSelected();
				StoreMenuItem selectedMenuData = (StoreMenuItem) menuList
						.getItemAtPosition(position);
				selectedMenuData.menuSelected = true;
				menuAdapter.notifyDataSetChanged();
			}
		});

		menuList.setAdapter(menuAdapter);

		initMenuData();

	}

	private void initMenuData() {
		NetworkManager.getInstance().getMenuData(getActivity(), storeId,
				new OnResultListener<StoreMenuResult>() {

					@Override
					public void onSuccess(StoreMenuResult result) {
						if (result.success == 1) {
							for (StoreMenuItem menu : result.result.items.hot) {
								menuAdapter.add(menu);
							}
							stampCount = result.result.count;
						}
					}

					@Override
					public void onFail(int code) {
						// TODO Auto-generated method stub

					}
				});
	}

	MenuItem menuStamp;

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		super.onCreateOptionsMenu(menu, inflater);
		inflater.inflate(R.menu.store_menu_info_menu, menu);
		menuStamp = menu.findItem(R.id.store_menu_stamp);

		if (stampCount != 0) {
			menuStamp.setVisible(true);
		} else {
			menuStamp.setVisible(false);
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (item.getItemId() == R.id.store_menu_stamp) {
			// 다이얼로그 떠야함
		}

		return super.onOptionsItemSelected(item);
	}

	private void addToCart() {
		menuAdapter.setOnAddCartAdapterListener(new OnAddCartAdapterListener() {

			@Override
			public void onAddCartAdapterListener(View v, StoreMenuItem data) {
				// TODO Auto-generated method stub

			}
		});
	}
}
