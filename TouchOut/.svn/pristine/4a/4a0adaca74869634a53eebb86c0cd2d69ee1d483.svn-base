package kr.jroad.touchout.fragment;

import kr.jroad.touchout.activity.R;
import kr.jroad.touchout.adapter.OrderbySpinnerAdapter;
import kr.jroad.touchout.adapter.TabsAdapter;
import kr.jroad.touchout.adapter.TabsIndicatorAdapter;
import kr.jroad.touchout.data.AddressInfoResult;
import kr.jroad.touchout.data.HomeCategoryListItemData;
import kr.jroad.touchout.manager.NetworkManager;
import kr.jroad.touchout.manager.NetworkManager.OnResultListener;
import kr.jroad.touchout.manager.PropertyManager;
import kr.jroad.touchout.manager.PropertyManager.OnCartChangeListener;
import kr.jroad.touchout.view.SortingStoreActionBarView;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBar.LayoutParams;
import android.support.v7.app.ActionBarActivity;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.Toast;

import com.viewpagerindicator.TabPageIndicator;

public class HomeSortingStoreFragment extends Fragment {

	public static final String[] CONTENT = new String[] { "All", "커피", "도시락",
			"피자", "밥버거", "치킨", "분식" };
	public static final String SEARCH_DISTANCE = "distance";
	public static final String SEARCH_STAR = "star";

	String orderby = SEARCH_DISTANCE;
	float latitude;
	float longitude;

	String provider;
	LocationManager lm;
	Criteria criteria;

	TabHost tabHost;
	ViewPager pager;
	TabsAdapter tabAdapter;
	String focusTab; // 홈에서 카테고리 눌러서 들어왔을때
	String keyword; // 찾기탭에서 검색해서 들어왔을때
	boolean isCartSelected = false;
	ImageView cartStrapView;
	FrameLayout cartLayout;
	
	Spinner orderbySpinner;
	OrderbySpinnerAdapter orderbyAdapter;

	// actionBar view
	ActionBar actionBar;
	ImageView gpsIconView;
	TextView currentLocationView;
	SortingStoreActionBarView actionBarView;

	TextView cartNumberView;
	TextView cartAboveNumberView;
	int cartNumber;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);
		actionBar = ((ActionBarActivity) getActivity()).getSupportActionBar();
		actionBar.setDisplayHomeAsUpEnabled(true);
		actionBar.setDisplayShowHomeEnabled(false);
		actionBar.setTitle("");
		actionBar.setBackgroundDrawable(getResources().getDrawable(
				R.color.main_orange_color));
		actionBar.setDisplayShowCustomEnabled(true);
		actionBarView = new SortingStoreActionBarView(getActivity());
		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, Gravity.CENTER_VERTICAL);
		actionBar.setCustomView(actionBarView, params);

		// 카테고리에서 선택해온 객체 받기
		Bundle b = getArguments();
		if (b != null) {
			HomeCategoryListItemData p = b
					.getParcelable(HomeFragment.SELECTED_CATEGORY);
			if (p != null) {
				focusTab = p.category;
			}
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater,
			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_home_sorting_store,
				container, false);
	}

	public Fragment getCurrentFragment() {
		int id = pager.getCurrentItem();
		String tag = "android:switcher:" + R.id.sorting_store_pager + ":" + id;
		Fragment f = getChildFragmentManager().findFragmentByTag(tag);
		return f;
	}

	// 위치 확정되면 + 거리순, 별점순 바뀔 시 알려줄 리시버 인터페이스 정의
	public interface OnLocationReceiver {
		public void onLocationReceived(Location location);

		public void onOrderbyChanged(String orderby);
	}

	Location currentLocation = null;

	public Location getFixedLocation() {
		return currentLocation;
	}

	public String getOrderby() {
		return orderby;
	}

	@Override
	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		gpsIconView = (ImageView) actionBarView
				.findViewById(R.id.sorting_actionbar_gps_img);
		currentLocationView = (TextView) actionBarView
				.findViewById(R.id.current_location_txt);
		currentLocationView.setVisibility(ImageView.INVISIBLE);
		orderbySpinner = (Spinner)actionBarView.findViewById(R.id.orderby_spinner);
		orderbyAdapter = new OrderbySpinnerAdapter(getActivity());
		orderbySpinner.setAdapter(orderbyAdapter);

		FragmentPagerAdapter tabAdapter = new TabsIndicatorAdapter(
				getChildFragmentManager());
		pager = (ViewPager) view.findViewById(R.id.sorting_store_pager);
		pager.setAdapter(tabAdapter);

		TabPageIndicator indicator = (TabPageIndicator) view
				.findViewById(R.id.sorting_store_tab_host);
		indicator.setViewPager(pager);

		cartNumberView = (TextView) view
				.findViewById(R.id.sorting_store_cart_number_view);
		cartAboveNumberView = (TextView) view
				.findViewById(R.id.sorting_store_cart_above_number_view);
		cartAboveNumberView.setVisibility(ImageView.GONE);

		cartStrapView = (ImageView) view
				.findViewById(R.id.sorting_store_cart_strap_view);
		cartStrapView.setImageResource(R.drawable.cart_strap);
		cartLayout = (FrameLayout) view
				.findViewById(R.id.sorting_store_cart_container);

		// gps 새로고침
		gpsIconView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (provider != null) {
					lm.requestSingleUpdate(provider, locationListener, null);
				}
			}
		});
		
		//스피너 값 바뀌면 리스너 호출
		orderbySpinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1,
					int position, long arg3) {
				if(position == 0 ) {
					orderby = SEARCH_DISTANCE;
					Fragment f = getCurrentFragment();
					if (f instanceof OnLocationReceiver) {
						((OnLocationReceiver) f).onOrderbyChanged(orderby);
					}
				} else if(position == 1) {
					orderby = SEARCH_STAR;
					Fragment f = getCurrentFragment();
					if (f instanceof OnLocationReceiver) {
						((OnLocationReceiver) f).onOrderbyChanged(orderby);
					}
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
				// TODO Auto-generated method stub
				
			}
		});

		int position = 0;
		// 받아온 스트링으로 위치 지정후 set
		if (focusTab != null && !focusTab.equals("")) {
			for (int i = 0; i < CONTENT.length; i++) {
				if (focusTab.equals(CONTENT[i])) {
					position = i;
				}
			}
		}

		initCartNumber();
		setCartNumber();
		toggleCart();

		indicator.setCurrentItem(position);

	}

	private void initCartNumber() {
		if (PropertyManager.getInstance().getCartItemNumber() != 0) {
			cartNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
			cartAboveNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
		} else {
			cartNumberView.setVisibility(ImageView.GONE);
			cartAboveNumberView.setVisibility(ImageView.GONE);
		}
	}

	private void setCartNumber() {

		PropertyManager.getInstance().setOnCartChangeListener(
				new OnCartChangeListener() {

					@Override
					public void onCartChangeListener() {
						if (PropertyManager.getInstance().getCartItemNumber() != 0) {
							cartNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
							cartAboveNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
						} else {
							cartNumberView.setVisibility(ImageView.GONE);
							cartAboveNumberView.setVisibility(ImageView.GONE);
						}
					}
				});
	}

	private void toggleCart() {
		cartStrapView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if(PropertyManager.getInstance().getCartItemNumber() != 0) {
					cartAboveNumberView.setVisibility(ImageView.VISIBLE);
				} else {
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}
				
				cartLayout.setVisibility(ImageView.VISIBLE);
				if (!isCartSelected) {
					CartFragment f = new CartFragment();
					FragmentTransaction ft = getChildFragmentManager()
							.beginTransaction();
					ft.replace(R.id.sorting_store_cart_container, f);
					// 백스텍 안됨 !
					ft.addToBackStack(null);
					ft.commit();
					cartStrapView.setVisibility(ImageView.GONE);
					cartNumberView.setVisibility(ImageView.GONE);
				}

			}
		});

		cartLayout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (cartStrapView.getVisibility() == ImageView.GONE) {
					FragmentManager fm = getChildFragmentManager();
					fm.popBackStack();
					cartLayout.setVisibility(ImageView.GONE);
					cartStrapView.setVisibility(ImageView.VISIBLE);
					if(PropertyManager.getInstance().getCartItemNumber() != 0) {
						cartNumberView.setVisibility(ImageView.VISIBLE);
					} else {
						cartNumberView.setVisibility(ImageView.GONE);
					}
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}
			}
		});
	}

	MenuItem menuSorting, subMenuDistance, subMenuPopular;

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		super.onCreateOptionsMenu(menu, inflater);
//		inflater.inflate(R.menu.sorting_store_menu, menu);
//
//		menuSorting = menu.findItem(R.id.menu_sorting);
		// subMenuDistance = menu.findItem(R.id.menu_sub_sorting_distance);
		// subMenuPopular = menu.findItem(R.id.menu_sub_sorting_popular);
	}

	/*
	 * 옵션메뉴가 아니라 액션바의 메뉴가 눌리면 다이얼로그가 뜨도록 수정해야함
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
//		if (item.getItemId() == R.id.menu_sorting) {
//
//		}
//		if (item.getItemId() == R.id.menu_sub_sorting_distance) {
//			// menuSorting.setTitle("");
//			menuSorting.setIcon(R.drawable.orderby_distance_selector);
//			orderby = SEARCH_DISTANCE;
//			Fragment f = getCurrentFragment();
//			if (f instanceof OnLocationReceiver) {
//				((OnLocationReceiver) f).onOrderbyChanged(orderby);
//			}
//		} else if (item.getItemId() == R.id.menu_sub_sorting_popular) {
//			// menuSorting.setTitle("");
//			menuSorting.setIcon(R.drawable.orderby_star_selector);
//			orderby = SEARCH_STAR;
//			Fragment f = getCurrentFragment();
//			if (f instanceof OnLocationReceiver) {
//				((OnLocationReceiver) f).onOrderbyChanged(orderby);
//			}
//		}

		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onResume() {
		super.onResume();
		lm = (LocationManager) getActivity().getSystemService(
				Context.LOCATION_SERVICE);

		// 지금 연결되어 있는 provider 확인
		if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			// provider = LocationManager.GPS_PROVIDER;

			/*******
			 * *** 일단 네트워크로 고정
			 * ********/
			provider = LocationManager.NETWORK_PROVIDER;
		} else if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
			provider = LocationManager.NETWORK_PROVIDER;
		} else {
			AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
			builder.setIcon(R.drawable.ic_launcher);
			builder.setTitle("위치정보 사용 동의");
			builder.setMessage("위치정보 사용을 동의하고 gps 사용을 활성화하러 설정페이지로 이동하시겠습니까?");
			builder.setPositiveButton("이동",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							Intent i = new Intent(
									Settings.ACTION_LOCATION_SOURCE_SETTINGS);
							startActivity(i);
						}
					});
			builder.setNegativeButton("취소",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();
						}
					});
			AlertDialog dialog = builder.create();
			dialog.show();
		}

		// 이전에 지정된 위치가 있다면 처리
		if (provider != null) {
			Location location = lm.getLastKnownLocation(provider);
			if (location != null) {
				locationListener.onLocationChanged(location);
			}
		}

		if (provider != null) {
			// 위치정보 가져오기 request
			lm.requestSingleUpdate(provider, locationListener, null);
		}
	}

	LocationListener locationListener = new LocationListener() {

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// singleUpdate
		}

		@Override
		public void onProviderEnabled(String provider) {

		}

		@Override
		public void onProviderDisabled(String provider) {

		}

		@Override
		public void onLocationChanged(Location location) {
			// 장소 받아와서 세팅
			latitude = (float) location.getLatitude();
			longitude = (float) location.getLongitude();

//			latitude = (float)37.467;
//			longitude = (float)126.959;
			
			currentLocationView.setVisibility(ImageView.VISIBLE);

			Toast.makeText(getActivity(),
					"latitude : " + latitude + ", longtitude : " + longitude,
					Toast.LENGTH_SHORT).show();
			// 동정보 받아오기
			NetworkManager.getInstance().getAddressInfo(getActivity(),
					latitude, longitude,
					new OnResultListener<AddressInfoResult>() {

						@Override
						public void onSuccess(AddressInfoResult result) {
							if (result != null) {
								currentLocationView
										.setText(result.addressInfo.legalDong);
							}
						}

						@Override
						public void onFail(int code) {
							// TODO Auto-generated method stub

						}
					});

			// location 확정 되면 리시버 호출
			currentLocation = location;
			Fragment f = getCurrentFragment();
			if (f instanceof OnLocationReceiver) {
				((OnLocationReceiver) f).onLocationReceived(location);
			}

		}
	};

	@Override
	public void onStop() {
		super.onStop();
		lm.removeUpdates(locationListener);
	};

}
