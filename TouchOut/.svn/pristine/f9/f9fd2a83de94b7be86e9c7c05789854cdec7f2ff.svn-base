package kr.jroad.touchout.fragment;

import com.viewpagerindicator.TabPageIndicator;

import kr.jroad.touchout.activity.R;
import kr.jroad.touchout.adapter.TabsAdapter;
import kr.jroad.touchout.adapter.TabsIndicatorAdapter;
import kr.jroad.touchout.data.HomeCategoryListItemData;
import kr.jroad.touchout.manager.PropertyManager;
import kr.jroad.touchout.manager.PropertyManager.OnCartChangeListener;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TabHost;
import android.widget.TextView;

public class HomeSortingStoreFragment extends Fragment {
	
	public static final String[] CONTENT = new String[] {"All", "커피", "도시락", "피자", "밥버거", "치킨", "분식"};
	
	TabHost tabHost;
	ViewPager pager;
	TabsAdapter tabAdapter;
	String focusTab;  //홈에서 카테고리 눌러서 들어왔을때
	String keyword;   //찾기탭에서 검색해서 들어왔을때 
	boolean isCartSelected = false;
	ImageView cartStrapView;
	FrameLayout cartLayout;
	ActionBar actionBar;
		
	TextView cartNumberView;
	TextView cartAboveNumberView;
	int cartNumber;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		setHasOptionsMenu(true);
		super.onCreate(savedInstanceState);
		
		actionBar = ((ActionBarActivity)getActivity()).getSupportActionBar();
		actionBar.setLogo(R.drawable.null_image);
		actionBar.setDisplayShowCustomEnabled(true);
		actionBar.setCustomView(R.layout.actionbar_sorting_store);
		
		//카테고리에서 선택해온 객체 받기
		Bundle b = getArguments();
		if( b != null) {
			HomeCategoryListItemData p =  b.getParcelable(HomeFragment.SELECTED_CATEGORY);
			if(p != null) {
			focusTab = p.category;
			}
		}
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater,
			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_home_sorting_store, container, false);
	}
	
	@Override
	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		
		FragmentPagerAdapter tabAdapter = new TabsIndicatorAdapter(getChildFragmentManager());

		pager = (ViewPager)view.findViewById(R.id.sorting_store_pager);
		
		pager.setAdapter(tabAdapter);
		
		TabPageIndicator indicator = (TabPageIndicator)view.findViewById(R.id.sorting_store_tab_host);
		indicator.setViewPager(pager);
		
		cartNumberView = (TextView) view
				.findViewById(R.id.sorting_store_cart_number_view);
		cartAboveNumberView = (TextView) view
				.findViewById(R.id.sorting_store_cart_above_number_view);
		cartAboveNumberView.setVisibility(ImageView.GONE);
		
		cartStrapView = (ImageView)view.findViewById(R.id.sorting_store_cart_strap_view);	
		cartLayout = (FrameLayout)view.findViewById(R.id.sorting_store_cart_container);
		
		
		
		int position = 0;
		//받아온 스트링으로 위치 지정후 set
		if(focusTab != null && !focusTab.equals("")) {
			for(int i = 0; i < CONTENT.length; i++) {
				if(focusTab.equals(CONTENT[i])) {
					position = i;
				}
			}
		}
		
		initCartNumber();
		setCartNumber();
		toggleCart();
		
		indicator.setCurrentItem(position);

	}
	
	private void initCartNumber() {
		if (PropertyManager.getInstance().getCartItemNumber() != 0) {
			cartNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
			cartAboveNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
		} else {
			cartNumberView.setText("");
			cartAboveNumberView.setText("");
		}
	}

	private void setCartNumber() {

		PropertyManager.getInstance().setOnCartChangeListener(
				new OnCartChangeListener() {

					@Override
					public void onCartChangeListener() {
						if (PropertyManager.getInstance().getCartItemNumber() != 0) {
							cartNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
							cartAboveNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
						} else {
							cartNumberView.setText("");
							cartAboveNumberView.setText("");
						}
					}
				});
	}

	private void toggleCart() {
		cartStrapView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				cartAboveNumberView.setVisibility(ImageView.VISIBLE);
				cartLayout.setVisibility(ImageView.VISIBLE);
				if (!isCartSelected) {
					CartFragment f = new CartFragment();
					FragmentTransaction ft = getChildFragmentManager()
							.beginTransaction();
					ft.replace(R.id.sorting_store_cart_container, f);
					// 백스텍 안됨 !
					ft.addToBackStack(null);
					ft.commit();
					cartStrapView.setVisibility(ImageView.GONE);
					cartNumberView.setVisibility(ImageView.GONE);
				}

			}
		});
		
		cartLayout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (cartStrapView.getVisibility() == ImageView.GONE) {
					FragmentManager fm = getChildFragmentManager();
					fm.popBackStack();
					cartStrapView.setVisibility(ImageView.VISIBLE);
					cartNumberView.setVisibility(ImageView.VISIBLE);
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}
			}
		});
	}
	
}
