package kr.jroad.touchout.fragment;

import kr.jroad.touchout.activity.PaymentActivity;
import kr.jroad.touchout.activity.R;
import kr.jroad.touchout.adapter.NowSaleListAdapter;
import kr.jroad.touchout.data.NowSaleItem;
import kr.jroad.touchout.data.NowSaleResult;
import kr.jroad.touchout.data.OrderResult;
import kr.jroad.touchout.data.OrderSendItem;
import kr.jroad.touchout.data.OrderSendResult;
import kr.jroad.touchout.manager.NetworkManager;
import kr.jroad.touchout.manager.NetworkManager.OnResultListener;
import kr.jroad.touchout.manager.PropertyManager;
import kr.jroad.touchout.manager.PropertyManager.OnCartChangeListener;
import kr.jroad.touchout.view.CenterTextActionBarView;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

public class NowSaleFragment extends Fragment {

	public static final String PAYMENT_NOW_SALE_MENU = "nowSalePayment";

	ListView nowSaleList;
	NowSaleListAdapter nowSaleAdapter;
	boolean isCartSelected = false;
	ImageView cartStrapView;
	FrameLayout cartLayout;
	float latitude;
	float longitude;
	TextView cartNumberView;
	TextView cartAboveNumberView;
	int cartNumber;

	LocationManager lm;
	String provider;

	ActionBar actionBar;
	CenterTextActionBarView actionBarView;
	TextView tabTitleView;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);

		actionBar = ((ActionBarActivity) getActivity()).getSupportActionBar();
		setHasOptionsMenu(true);
		actionBar.setDisplayShowCustomEnabled(true);
		actionBarView = new CenterTextActionBarView(getActivity());
		actionBar.setBackgroundDrawable(getResources().getDrawable(
				R.color.main_orange_color));
		actionBar.setCustomView(actionBarView, new ActionBar.LayoutParams(
				Gravity.CENTER));
		actionBar.setTitle("");
	}

	@Override
	public View onCreateView(LayoutInflater inflater,
			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_now_sale, container, false);

	}

	@Override
	public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		tabTitleView = (TextView) actionBarView
				.findViewById(R.id.actionbar_title_txt);
		tabTitleView.setText("NOW 할인");

		nowSaleList = (ListView) view.findViewById(R.id.now_sale_list);
		nowSaleAdapter = new NowSaleListAdapter(getActivity());

		nowSaleList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				NowSaleItem selectedSaleItem = (NowSaleItem) nowSaleList
						.getItemAtPosition(position);
				goPayment(selectedSaleItem);
			}
		});

		nowSaleList.setAdapter(nowSaleAdapter);

		cartStrapView = (ImageView) view
				.findViewById(R.id.now_sale_cart_strap_view);
		cartStrapView.setImageResource(R.drawable.cart_strap);
		cartLayout = (FrameLayout) view
				.findViewById(R.id.now_sale_cart_container);
		cartNumberView = (TextView) view
				.findViewById(R.id.now_sale_cart_number_view);
		cartAboveNumberView = (TextView) view
				.findViewById(R.id.now_sale_cart_above_number_view);
		cartAboveNumberView.setVisibility(ImageView.GONE);

		initCartNumber();
		setCartNumber();
		toggleCart();
	}

	private void getNowSaleData() {
		NetworkManager.getInstance().getNowSaleData(getActivity(), latitude,
				longitude, 1, new OnResultListener<NowSaleResult>() {

					@Override
					public void onSuccess(NowSaleResult result) {
						if (result.success == 1) {
							nowSaleAdapter.clear();
							for (NowSaleItem data : result.result.items) {
								nowSaleAdapter.add(data);
							}
						}
					}

					@Override
					public void onFail(int code) {
						// TODO Auto-generated method stub

					}
				});
	}

	// payment 버튼 누르면 즐겨찾기아이템 + store_id로 검색한 매장 객체 
		private void goPayment(NowSaleItem nowSaleMenu) {
			
			//json규격으로 보내줄 결제 내역 객체 생성
			OrderSendResult sendPaymentResult = new OrderSendResult();
			sendPaymentResult.store_id = nowSaleMenu.store_id;
			sendPaymentResult.store_name = nowSaleMenu.storeName;
			
			OrderSendItem payItem = new OrderSendItem();
			payItem.item_id = nowSaleMenu.item_id;
			payItem.item_name = nowSaleMenu.item_name;
			
			//즐겨찾기는 수량에 관계없으므로 무조건 1로 고정
			payItem.count = 1;
			
			//무조건 휘핑 없음!
			payItem.is_whipping = 0;
			payItem.size = nowSaleMenu.size;
					
			sendPaymentResult.items.add(payItem);
			
			//결제 내역을 서버에 올려주고 payment activity에 뿌려줄 정보를 담은 객체를 받음
			NetworkManager.getInstance().createOrder(getActivity(), sendPaymentResult, new OnResultListener<OrderResult>() {

				@Override
				public void onSuccess(OrderResult result) {
					if(result.success == 1) {
						Intent i = new Intent(getActivity(),
								PaymentActivity.class);
						// 받아온 객체 보내줘야함 
						i.putExtra(PaymentActivity.PAYMENT_ORDER_DETAILS, result.result);
						startActivity(i);
					}
				}

				@Override
				public void onFail(int code) {
					// TODO Auto-generated method stub
					
				}
			});
		}

	private void initCartNumber() {
		if (PropertyManager.getInstance().getCartItemNumber() != 0) {
			cartNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
			cartAboveNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
		} else {
			cartNumberView.setVisibility(ImageView.GONE);
			cartAboveNumberView.setVisibility(ImageView.GONE);
		}
	}

	private void setCartNumber() {

		PropertyManager.getInstance().setOnCartChangeListener(
				new OnCartChangeListener() {

					@Override
					public void onCartChangeListener() {
						if (PropertyManager.getInstance().getCartItemNumber() != 0) {
							cartNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
							cartAboveNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
						} else {
							cartNumberView.setVisibility(ImageView.GONE);
							cartAboveNumberView.setVisibility(ImageView.GONE);
						}
					}
				});
	}

	private void toggleCart() {
		cartStrapView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (PropertyManager.getInstance().getCartItemNumber() != 0) {
					cartAboveNumberView.setVisibility(ImageView.VISIBLE);
				} else {
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}

				cartLayout.setVisibility(ImageView.VISIBLE);
				if (!isCartSelected) {
					CartFragment f = new CartFragment();
					FragmentTransaction ft = getChildFragmentManager()
							.beginTransaction();
					ft.replace(R.id.now_sale_cart_container, f);
					// 백스텍 안됨 !
					ft.addToBackStack(null);
					ft.commit();
					cartStrapView.setVisibility(ImageView.GONE);
					cartNumberView.setVisibility(ImageView.GONE);
				}

			}
		});

		cartLayout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (cartStrapView.getVisibility() == ImageView.GONE) {
					FragmentManager fm = getChildFragmentManager();
					fm.popBackStack();
					cartLayout.setVisibility(ImageView.GONE);
					cartStrapView.setVisibility(ImageView.VISIBLE);
					if (PropertyManager.getInstance().getCartItemNumber() != 0) {
						cartNumberView.setVisibility(ImageView.VISIBLE);
					} else {
						cartNumberView.setVisibility(ImageView.GONE);
					}
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}
			}
		});
	}

	@SuppressLint("NewApi")
	@Override
	public void onResume() {
		super.onResume();

		actionBar.setBackgroundDrawable(getResources().getDrawable(
				R.color.main_orange_color));
		actionBar.setCustomView(actionBarView);

		tabTitleView.setText("NOW 할인");

		lm = (LocationManager) getActivity().getSystemService(
				Context.LOCATION_SERVICE);

		// 지금 연결되어 있는 provider 확인
		if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			// provider = LocationManager.GPS_PROVIDER;

			/*******
			 * *** 일단 네트워크로 고정
			 * ********/
			provider = LocationManager.NETWORK_PROVIDER;
		} else if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
			provider = LocationManager.NETWORK_PROVIDER;
		} else {
			AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
			builder.setIcon(R.drawable.ic_launcher);
			builder.setTitle("위치정보 사용 동의");
			builder.setMessage("위치정보 사용을 동의하고 gps 사용을 활성화하러 설정페이지로 이동하시겠습니까?");
			builder.setPositiveButton("이동",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							Intent i = new Intent(
									Settings.ACTION_LOCATION_SOURCE_SETTINGS);
							startActivity(i);
						}
					});
			builder.setNegativeButton("취소",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();
						}
					});
			AlertDialog dialog = builder.create();
			dialog.show();
		}

		// 이전에 지정된 위치가 있다면 처리
		if (provider != null) {
			Location location = lm.getLastKnownLocation(provider);
			if (location != null) {
				locationListener.onLocationChanged(location);
			}
		}

		if (provider != null) {
			// 위치정보 가져오기 request
			lm.requestSingleUpdate(provider, locationListener, null);
		}
	}

	LocationListener locationListener = new LocationListener() {

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// singleUpdate
		}

		@Override
		public void onProviderEnabled(String provider) {

		}

		@Override
		public void onProviderDisabled(String provider) {

		}

		@Override
		public void onLocationChanged(Location location) {
			// 장소 받아와서 세팅
			latitude = (float) location.getLatitude();
			longitude = (float) location.getLongitude();

			if (latitude != 0) {
				getNowSaleData();
			}
		}
	};

}
