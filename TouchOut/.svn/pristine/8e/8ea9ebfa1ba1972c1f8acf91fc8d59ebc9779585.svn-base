package kr.jroad.touchout.activity;

import java.util.TimerTask;

import kankan.wheel.widget.OnWheelChangedListener;
import kankan.wheel.widget.OnWheelScrollListener;
import kankan.wheel.widget.WheelView;
import kr.jroad.touchout.adapter.WheelNumberViewAdapter;
import kr.jroad.touchout.data.FavoriteItem;
import kr.jroad.touchout.dialog.PrepareDialogFragment;
import kr.jroad.touchout.fragment.FavoriteFragment;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class PaymentActivity extends ActionBarActivity {

	Integer[] minutes = new Integer[] {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55 };

	FavoriteItem favoriteMenu;

	TextView menuView;
	TextView storeView;
	TextView addressView;
	TextView cartPriceView; // 전체결제할 금액
	Button btnUseStamp;
	TextView mileageView;
	LinearLayout mileageLayout;
	TextView userMileageView; // 가지고 있는 마일리지
	EditText useMileageEdit;
	Button btnUseMileage;
	TextView resultPriceView; // 할인 받은 최종 금액
	WheelView wheelView;
	CheckBox cardCheckBox;
	CheckBox phoneCheckBox;
	TextView addMileageView; // 결제 후 적립될 마일리지
	Button btnPayment;

	ActionBar actionBar;
	
	public static final String DIALOG_PREPARE_TAG = "prepareDialog";

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_payment);
		actionBar = getSupportActionBar();
		actionBar.setHomeButtonEnabled(true);
		actionBar.setDisplayShowCustomEnabled(true);
		actionBar.setBackgroundDrawable(getResources().getDrawable(
				R.color.main_orange_color));
		actionBar.setLogo(R.drawable.back_btn);

		menuView = (TextView) findViewById(R.id.payment_menu_txt);
		storeView = (TextView) findViewById(R.id.payment_store_txt);
		addressView = (TextView) findViewById(R.id.payment_address_txt);
		cartPriceView = (TextView) findViewById(R.id.payment_cart_price_txt);
		mileageLayout = (LinearLayout) findViewById(R.id.payment_mileage_layout);
		userMileageView = (TextView) findViewById(R.id.payment_user_mileage_txt);
		useMileageEdit = (EditText) findViewById(R.id.payment_mileage_edit);
		resultPriceView = (TextView) findViewById(R.id.payment_result_price_txt);
		addMileageView = (TextView) findViewById(R.id.payment_add_mileage_txt);
		mileageView = (TextView) findViewById(R.id.payment_mileage_txt);
		btnUseStamp = (Button) findViewById(R.id.payment_stamp_usage_btn);
		btnUseMileage = (Button) findViewById(R.id.payment_use_all_mileage_btn);
		cardCheckBox = (CheckBox) findViewById(R.id.payment_card_check_box);
		Button btnPayment = (Button) findViewById(R.id.payment_btn);
		phoneCheckBox = (CheckBox) findViewById(R.id.payment_phone_check_box);
		initWheel(R.id.payment_wheel_view, minutes);

		mileageView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				switch (mileageLayout.getVisibility()) {
				case ImageView.VISIBLE:
					mileageLayout.setVisibility(ImageView.GONE);
					break;
				case ImageView.GONE:
					mileageLayout.setVisibility(ImageView.VISIBLE);
					break;
				}
			}
		});

		// 사용 불가 일 경우 unenabled
		btnUseStamp.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				PrepareDialogFragment dialog = new PrepareDialogFragment();
				dialog.show(getSupportFragmentManager(), DIALOG_PREPARE_TAG);
			}
		});

		btnUseMileage.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				PrepareDialogFragment dialog = new PrepareDialogFragment();
				dialog.show(getSupportFragmentManager(), DIALOG_PREPARE_TAG);
			}
		});

		cardCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				// 결제 금액과 확인
			}
		});

		// 즐겨찾기 메뉴 눌렀을 경우 바로 주문하러 옴
		Intent favoriteToPayment = getIntent();
		if (favoriteToPayment != null) {
			favoriteMenu = favoriteToPayment
					.getParcelableExtra(FavoriteFragment.GO_PAYMENT_MENU);
			if (favoriteMenu != null) {
				Toast.makeText(this, "menu : " + favoriteMenu.menuName,
						Toast.LENGTH_SHORT).show();
			}
		}

		btnPayment.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent i = new Intent(PaymentActivity.this,
						PaymentFinishActivity.class);
				startActivity(i);
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (item.getItemId() == android.R.id.home) {
			finish();
			return true;
		}
		return false;
	}
	
	private void initWheel(int id, Integer[] minutes) {

		WheelNumberViewAdapter<Integer> adapter = new WheelNumberViewAdapter<Integer>(this,
				minutes);

		WheelView wheel = getWheel(id);
		wheel.setViewAdapter(adapter);
		wheel.setCurrentItem((int) (Math.random() * 10));
		wheel.setVisibleItems(7);

		wheel.addChangingListener(changedListener);
		wheel.addScrollingListener(scrolledListener);
		wheel.setCurrentItem(0);
		wheel.setCyclic(true);
		wheel.setEnabled(true);
	}
	
	Handler handlar = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			mixWheel(R.id.payment_wheel_view);
		}
	};

	class UpdateTimeTask extends TimerTask {
		public void run() {
			handlar.removeCallbacks(this);
			handlar.sendEmptyMessage(0);
		}
	}

	// Wheel scrolled flag
	private boolean wheelScrolled = false;

	// Wheel scrolled listener
	OnWheelScrollListener scrolledListener = new OnWheelScrollListener() {
		public void onScrollingStarted(WheelView wheel) {
			wheelScrolled = true;
		}

		public void onScrollingFinished(WheelView wheel) {
			wheelScrolled = false;
			// updateStatus();
			
			Toast.makeText(getApplicationContext(), minutes[wheel.getCurrentItem()]+"", Toast.LENGTH_LONG).show();
		}
	};

	// Wheel changed listener
	private OnWheelChangedListener changedListener = new OnWheelChangedListener() {
		public void onChanged(WheelView wheel, int oldValue, int newValue) {
			if (!wheelScrolled) {
				// updateStatus();
			}
		}
	};

	private WheelView getWheel(int id) {
		return (WheelView) findViewById(id);
	}

	private void mixWheel(int id) {
		WheelView wheel = getWheel(id);
		wheel.scroll(-350 + (int) (Math.random() * 50), 2000);

	}

}
