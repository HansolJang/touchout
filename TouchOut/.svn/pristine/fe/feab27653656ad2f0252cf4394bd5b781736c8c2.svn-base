package kr.jroad.touchout.activity;

import kr.jroad.touchout.data.FavoriteItem;
import kr.jroad.touchout.data.SortingStore;
import kr.jroad.touchout.data.StoreResult;
import kr.jroad.touchout.fragment.CartFragment;
import kr.jroad.touchout.fragment.FavoriteFragment;
import kr.jroad.touchout.fragment.HomeAllStoreFragment;
import kr.jroad.touchout.fragment.StoreHotMenuFragment;
import kr.jroad.touchout.fragment.StoreIcedMenuFragment;
import kr.jroad.touchout.manager.NetworkManager;
import kr.jroad.touchout.manager.NetworkManager.OnResultListener;
import kr.jroad.touchout.manager.PropertyManager;
import kr.jroad.touchout.manager.PropertyManager.OnCartChangeListener;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTabHost;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;
import android.widget.Toast;

import com.nostra13.universalimageloader.core.ImageLoader;

public class StoreMenuActivity extends ActionBarActivity {

	private static final String STORE_MENU_TAB1_ID = "hotMenu";
	private static final String STORE_MENU_TAB2_ID = "icedMenu";

	ImageView cartStrapView;
	boolean isCartSelected = false;
	LinearLayout storeInfoLayout;
	FrameLayout cartLayout;
	ActionBar actionBar;
	int storeId;
	ImageLoader imgLoader;
	Button btnPayment;
	SortingStore selectedStore;
	FavoriteItem editMenu;
	Bundle editFavoriteMenuBundle;
	Bundle selectedStoreBundle;

	ImageView storeImgView;
	TextView storeNameView;
	TextView storeDescView;
	RatingBar storeStarView;
	TextView cartNumberView;
	TextView cartAboveNumberView;
	int cartNumber;

	FragmentTabHost tabHost;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_store_menu);
		actionBar = getSupportActionBar();
		actionBar.setHomeButtonEnabled(true);
		actionBar.setDisplayShowCustomEnabled(true);
		actionBar.setBackgroundDrawable(getResources().getDrawable(
				R.color.main_orange_color));

		imgLoader = ImageLoader.getInstance();

		storeInfoLayout = (LinearLayout) findViewById(R.id.store_info_layout);
		storeImgView = (ImageView) storeInfoLayout.findViewById(R.id.store_img);
		storeNameView = (TextView) storeInfoLayout
				.findViewById(R.id.store_name);
		storeDescView = (TextView) storeInfoLayout
				.findViewById(R.id.store_desc);
		storeStarView = (RatingBar) storeInfoLayout
				.findViewById(R.id.store_rating_bar);

		Intent i = getIntent();
		if (i != null) {
			// 매장 목록에서 선택해서 들어온 매장
			selectedStore = i
					.getParcelableExtra(HomeAllStoreFragment.SELECTED_STORE);
			// 즐겨찾기->수정 으로 넘어온 객체
			editMenu = i.getParcelableExtra(FavoriteFragment.GO_EDIT_MENU);
			if (editMenu != null) {
				// 즐겨찾기 메뉴의 매장 정보 얻어옴
				NetworkManager.getInstance().getStore(this, editMenu.store_id,
						new OnResultListener<StoreResult>() {

							@Override
							public void onSuccess(StoreResult result) {
								if (result.success == 1) {
									selectedStore = result.result.items;
									actionBar.setTitle(selectedStore.name);
									imgLoader.displayImage(selectedStore.image,
											storeImgView);
									storeNameView.setText(selectedStore.name);
									storeDescView
											.setText(selectedStore.description);
									storeStarView.setMax(5);
									storeStarView.setFocusable(false);
									storeStarView.setRating(selectedStore.star);
								}
							}

							@Override
							public void onFail(int code) {
								Toast.makeText(StoreMenuActivity.this,
										"매장 불러오기 실패", Toast.LENGTH_SHORT)
										.show();
							}
						});
			}

			// 페이지 상단 매장 정보 세팅
			if (selectedStore != null) {
				actionBar.setTitle(selectedStore.name);
				imgLoader.displayImage(selectedStore.image, storeImgView);
				storeNameView.setText(selectedStore.name);
				storeDescView.setText(selectedStore.description);
				storeStarView.setMax(5);
				storeStarView.setFocusable(false);
				storeStarView.setRating(selectedStore.star);
			}

			// 매장 상세 정보 페이지로 이동할 경우 넘겨줄 번들
			Bundle selectedStoreBundle = new Bundle();
			selectedStoreBundle.putParcelable(
					HomeAllStoreFragment.SELECTED_STORE, selectedStore);
			editFavoriteMenuBundle = new Bundle();
			editFavoriteMenuBundle.putParcelable(FavoriteFragment.GO_EDIT_MENU,
					editMenu);
			editFavoriteMenuBundle.putParcelable(
					HomeAllStoreFragment.SELECTED_STORE, selectedStore);

		}

		tabHost = (FragmentTabHost) findViewById(R.id.store_menu_tab_host);
		tabHost.setup(this, getSupportFragmentManager(),
				R.id.store_menu_container);

		if (selectedStore != null) {
			tabHost.addTab(
					tabHost.newTabSpec(STORE_MENU_TAB1_ID).setIndicator("HOT"),
					StoreHotMenuFragment.class, selectedStoreBundle);
			tabHost.addTab(
					tabHost.newTabSpec(STORE_MENU_TAB2_ID).setIndicator("ICED"),
					StoreIcedMenuFragment.class, selectedStoreBundle);
		} else if (editMenu != null) {
			tabHost.addTab(
					tabHost.newTabSpec(STORE_MENU_TAB1_ID).setIndicator("HOT"),
					StoreHotMenuFragment.class, editFavoriteMenuBundle);
			tabHost.addTab(
					tabHost.newTabSpec(STORE_MENU_TAB2_ID).setIndicator("ICED"),
					StoreIcedMenuFragment.class, editFavoriteMenuBundle);
		}

		// tabHost.setOnTabChangedListener(new OnTabChangeListener() {
		//
		// @Override
		// public void onTabChanged(String tabId) {
		// // 타이틀 바꿔야할듯?
		//
		// }
		// });

		cartNumberView = (TextView)findViewById(R.id.store_menu_cart_number_view);
		cartNumberView.setBackgroundResource(R.drawable.cart_speach_balloon);
		cartAboveNumberView = (TextView)findViewById(R.id.store_menu_cart_above_number_view);
		cartAboveNumberView.setVisibility(ImageView.GONE);
		cartStrapView = (ImageView)findViewById(R.id.store_menu_cart_strap_view);
		cartStrapView.setImageResource(R.drawable.cart_strap);
		cartLayout = (FrameLayout)findViewById(R.id.store_menu_cart_container);

		// 눌렸을때 장바구니정보 모두 결제내역으로
		btnPayment = (Button) findViewById(R.id.store_menu_payment_btn);

		initCartNumber();
		setCartNumber();
		toggleCart();

		btnPayment.setOnClickListener(new View.OnClickListener() {

			/***
			 * * 결제 내역 제이슨으로
			 * ****/

			@Override
			public void onClick(View v) {
				Intent i = new Intent(StoreMenuActivity.this,
						PaymentActivity.class);
				startActivity(i);
			}
		});

		/***
		 * 매장 정보 넘겨서 매장 상세 정보 store_id 로 매장 검색
		 * **/
		storeInfoLayout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent i = new Intent(StoreMenuActivity.this,
						StoreInfoActivity.class);
				if (selectedStore != null) {
					i.putExtra(HomeAllStoreFragment.SELECTED_STORE,
							selectedStore);
				} else if (editMenu != null) {
					i.putExtra(FavoriteFragment.GO_EDIT_MENU, editMenu);
				}
				startActivity(i);
			}
		});

	}

	public int getStoreId() {
		return storeId;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		} else if (id == android.R.id.home) {
			finish();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	private void initCartNumber() {
		cartAboveNumberView.setVisibility(ImageView.GONE);
		if (PropertyManager.getInstance().getCartItemNumber() != 0) {
			cartNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
			cartAboveNumberView.setText(PropertyManager.getInstance()
					.getCartItemNumber() + "");
			btnPayment.setText("장바구니에 "
					+ PropertyManager.getInstance().getCartItemNumber()
					+ "개의 상품이 담겨있습니다!");
		} else {
			cartNumberView.setVisibility(ImageView.GONE);
			cartAboveNumberView.setVisibility(ImageView.GONE);
			btnPayment.setText("장바구니에 상품을 담아주세요!");
		}

	}

	private void setCartNumber() {

		PropertyManager.getInstance().setOnCartChangeListener(
				new OnCartChangeListener() {

					@Override
					public void onCartChangeListener() {
						if (PropertyManager.getInstance().getCartItemNumber() != 0) {
							cartNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
							cartAboveNumberView.setText(PropertyManager
									.getInstance().getCartItemNumber() + "");
							btnPayment.setText("장바구니에 "
									+ PropertyManager.getInstance()
											.getCartItemNumber()
									+ "개의 상품이 담겨있습니다!");
						} else {
							cartNumberView.setText("");
							cartAboveNumberView.setText("");
							btnPayment.setText("장바구니에 상품을 담아주세요!");
						}
					}
				});
	}

	private void toggleCart() {
		cartStrapView.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				cartLayout.setVisibility(ImageView.VISIBLE);
				if (!isCartSelected) {
					CartFragment f = new CartFragment();
					FragmentTransaction ft = getSupportFragmentManager()
							.beginTransaction();
					ft.replace(R.id.store_menu_cart_container, f);
					// 백스텍 안됨 !
					ft.addToBackStack(null);
					ft.commit();
					cartStrapView.setVisibility(ImageView.GONE);
					cartNumberView.setVisibility(ImageView.GONE);
					cartAboveNumberView.setVisibility(ImageView.VISIBLE);
				}

			}
		});

		cartLayout.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (cartStrapView.getVisibility() == ImageView.GONE) {
					cartLayout.setVisibility(ImageView.GONE);
					FragmentManager fm = getSupportFragmentManager();
					fm.popBackStack();
					cartStrapView.setVisibility(ImageView.VISIBLE);
					cartNumberView.setVisibility(ImageView.VISIBLE);
					cartAboveNumberView.setVisibility(ImageView.GONE);
				}
			}
		});
	}

}
