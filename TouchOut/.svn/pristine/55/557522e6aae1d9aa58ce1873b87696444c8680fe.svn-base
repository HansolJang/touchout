package kr.jroad.touchout.view;

import java.util.ArrayList;

import kr.jroad.touchout.activity.R;
import kr.jroad.touchout.data.StoreMenu;
import kr.jroad.touchout.data.StoreMenuItem;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.ImageLoader;

public class MenuListView extends FrameLayout {
	
	public interface OnMenuClickListner {
		public void onFavoriteSelectListener(MenuListView view, StoreMenuItem data);
		public void onAddCartListener(MenuListView view, StoreMenuItem data);
		public void onCountPlusListener(MenuListView view, StoreMenuItem data);
		public void onCountMinusListener(MenuListView view, StoreMenuItem data);
		public void onWhippingSelectListener(MenuListView view, StoreMenuItem data);
		public void onPaymentListener(MenuListView view, StoreMenuItem data);
	}
	//받을 이벤트들에 달 리스너 인터페이스 정의
	OnMenuClickListner favoriteListener;
	OnMenuClickListner cartListener;
	OnMenuClickListner plusListener;
	OnMenuClickListner minusListener;
	OnMenuClickListner whippingListener;
	OnMenuClickListner paymentListener;

	public void setOnFavoriteSelectListener(OnMenuClickListner listener) {
		favoriteListener = listener;
	}
	public void setOnAddCartListener(OnMenuClickListner listener) {
		cartListener = listener;
	}
	public void setOnCountPlusListener(OnMenuClickListner listener) {
		plusListener = listener;
	}
	public void setOnCountMinusListener(OnMenuClickListner listener) {
		minusListener = listener;
	}
	public void setOnWhippingSelectListener(OnMenuClickListner listener) {
		whippingListener = listener;
	}
	public void setOnPaymentListener(OnMenuClickListner listener) {
		paymentListener = listener;
	}

	Context mContext;
	ArrayList<StoreMenu> items = new ArrayList<StoreMenu>();

	public MenuListView(Context context) {
		super(context);
		init();
	}

	StoreMenuItem data;

	boolean isHot;
	LinearLayout menuLayout;
	ImageView menuImgView;
	TextView menuNameView;
	TextView menuPriceView;
	LinearLayout menuDetailLayout;
	TextView menuWhippingText;
	CheckBox menuWhippingCheckbox;
	TextView menuAmountView;
	ImageLoader imgLoader;

	private void init() {
		LayoutInflater.from(getContext())
				.inflate(R.layout.menu_list_item, this);

		menuLayout = (LinearLayout) findViewById(R.id.menu_layout);
		menuImgView = (ImageView) findViewById(R.id.menu_img);
		menuNameView = (TextView) findViewById(R.id.menu_name_txt);
		menuPriceView = (TextView) findViewById(R.id.menu_price_txt);
		menuDetailLayout = (LinearLayout) findViewById(R.id.menu_detail_layout);
		menuWhippingText = (TextView) findViewById(R.id.menu_whipping_txt);
		menuWhippingCheckbox = (CheckBox) findViewById(R.id.menu_whipping_checkbox);
		menuAmountView = (TextView) findViewById(R.id.menu_amount_txt);
		imgLoader = ImageLoader.getInstance();

		menuWhippingCheckbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				if(whippingListener != null) {
					whippingListener.onWhippingSelectListener(MenuListView.this, data);
				}
			}
		});
		
		Button btnMenuAmountMinus = (Button) findViewById(R.id.menu_amount_minus_btn);
		btnMenuAmountMinus.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if(minusListener != null) {
					minusListener.onCountMinusListener(MenuListView.this, data);
				}
			}
		});

		Button btnMenuAmountPlus = (Button) findViewById(R.id.menu_amount_plus_btn);
		btnMenuAmountPlus.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if(plusListener != null) {
					plusListener.onCountPlusListener(MenuListView.this, data);
				}
			}
		});

		Button btnMenuSizeRegular = (Button) findViewById(R.id.menu_size_regular_btn);
		btnMenuSizeRegular.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Button view = (Button) v;
				view.setSelected(!isSelected());
			}
		});

		Button btnMenuSizeLarge = (Button) findViewById(R.id.menu_size_large_btn);
		btnMenuSizeLarge.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				Button view = (Button) v;
				view.setSelected(!isSelected());
			}
		});

		ImageView btnMenuFavorite = (ImageView) findViewById(R.id.menu_favorite_img);
		btnMenuFavorite.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (favoriteListener != null) {
					favoriteListener.onFavoriteSelectListener(MenuListView.this, data);
				}
			}
		});

		Button btnMenuCart = (Button) findViewById(R.id.menu_cart_btn);
		btnMenuCart.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if (cartListener != null) {
					cartListener.onAddCartListener(MenuListView.this, data);
				}
			}
		});

		Button btnMenuPayment = (Button) findViewById(R.id.menu_payment_btn);
		btnMenuPayment.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				if(paymentListener != null) {
					paymentListener.onPaymentListener(MenuListView.this, data);
				}
			}
		});

	}

	public void setData(StoreMenuItem data) {
		this.data = data;
		if(data.is_whipping == 0) {
			data.whippingEnabled = false;
		} else {
			data.whippingEnabled = true;
		}
		imgLoader.displayImage(data.image, menuImgView);
		menuNameView.setText(data.menuName);
		menuPriceView.setText(data.menuPrice+"");
		if (data.menuSelected) {
			menuDetailLayout.setVisibility(VISIBLE);
			if (data.whippingEnabled) {
				menuWhippingText.setEnabled(true);
				menuWhippingCheckbox.setEnabled(true);
			} else {
				menuWhippingText.setEnabled(false);
				menuWhippingCheckbox.setEnabled(false);
			}

			menuAmountView.setText(data.count + "");

		} else {
			menuDetailLayout.setVisibility(GONE);
		}
	}

}
